= SafeAttributes

By default Rails/ActiveRecord 3 creates attribute accessors for all 
database table columns in each model.  Columns with specific names 
cause errors because they result in ActiveRecord redefining a key 
method within either Ruby or ActiveRecord in an incompatible way.  A 
classic example is any table with a column named 'class', though there 
are other possible examples.  Put simply, this gem makes it easier
to support a legacy database schema with ActiveRecord.

Using this gem enhances ActiveRecord to change the default behavior for
the creation of attribute accessors.  Instance methods in 
ActiveRecord::Base, except for 'id', are combined into a list.  This list
is checked before the creation of two types of attribute accessors: 
attribute() and attribute=().  

You can add to this list by calling bad_attribute_names with a list of
method names you do not want generated.  Rails generates additional methods
that this module does not prevent the creation of: 

* attribute_before_type_cast
* attribute_changed?
* attribute_was
* attribute_will_change!
* attribute?

These largely should not run afoul of Ruby or ActiveRecord in most cases.

== Accessing Attributes

To access an attribute in ActiveRecord without its normal getter or setter
you can use a couple of different approaches.

* model_instance[:attribute]  # works as both getter and setter like a hash
* model_instance.read_attribute('attribute')
* model_instance.write_attribute('attribute', value)

You can read more about reserved words[http://oldwiki.rubyonrails.org/rails/pages/ReservedWords] and magic field names[http://oldwiki.rubyonrails.org/rails/pages/MagicFieldNames] on Rails' wiki pages.

== Validations 

By including safe_attributes, an instance method read_attribute_for_validation
is defined in a way that will work for all attributes instead of the 
default implementation that relies upon the default accessors. In other
words, `validates_presence_of :class' will work as of version 1.0.3.

== Installing

  gem install safe_attributes

If you do not have the newest version of ActiveRecord, rubygems will 
attempt to install it for you.  This can result in an error like below.

  ERROR:  Error installing safe_attributes:
    activemodel requires activesupport (= 3.0.3, runtime)

You can use this gem with activerecord and activesupport >= 3.0.  
If you already have an appropriate version of activerecord and 
activesupport installed then use --ignore-dependencies to avoid this
error.  If you have the latest version already then the gem should install
without issue using the recommended approach above.

== Using

=== Ruby

This gem has been tested with:

* Ruby 1.8.7 
* Ruby 1.9.2
* Ruby 1.9.3
* JRuby 1.6.4

Note that as of Sept. 25, 2011, jruby 1.6.4 failed some tests when using
ActiveRecord 3.1.  Google indicates others have seen these issues so I 
expect it will be addressed in the near future by a new jruby release.

=== Rails

SafeAttributes used to be included into ActiveRecord::Base automatically 
through a Railtie. This Railtie is no longer included automatically by default, 
but it is still available should you wish to include SafeAttributes 
into ActiveRecord::Base. Simply add the following to initializers/safe_attributes.rb:

   require 'safe_attributes/railtie.rb' if defined?(Rails)

=== Outside of Rails / Rails Without Initializer

Add safe_attributes to your Gemfile.

  gem 'safe_attributes'

  require 'safe_attributes'
  class MyModel < ActiveRecord::Base
    include SafeAttributes
  end

== Caveats

It is virtually impossible to have a column named 'attribute' in your
schema when using ActiveRecord.  After spending some time trying to 
make it work I've come to the conclusion the only way to support this
will be to change the tactic I'm using entirely, and likely to
get the developers of ActiveRecord to agree to a patch.

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010,2011,2012 C. Brian Jones. See LICENSE for details.

== Thanks

* Jaime Bellmyer - http://kconrails.com
